<#
.SYNOPSIS
Bootstrap completo para m√°quina nova - Sistema offline
Configura ambiente DevOps completo sem necessidade de reposit√≥rio online

.DESCRIPTION
Este script √© usado quando o projeto j√° foi transferido para a m√°quina
(via USB, rede ou OneDrive) e precisa apenas configurar as depend√™ncias
e inicializar o ambiente.

.PARAMETER ProjectPath
Caminho customizado para o projeto (padr√£o: pasta atual)

.PARAMETER SkipSetup
Pula a instala√ß√£o de depend√™ncias

.PARAMETER SkipInit
Pula a inicializa√ß√£o do ambiente

.EXAMPLE
.\Bootstrap-DevOps.ps1
Execu√ß√£o completa na pasta atual

.EXAMPLE
.\Bootstrap-DevOps.ps1 -ProjectPath "C:\MeuProjeto\DevOps"
Execu√ß√£o em caminho customizado

.EXAMPLE
.\Bootstrap-DevOps.ps1 -SkipSetup
Apenas inicializa√ß√£o, sem instalar depend√™ncias
#>

param(
    [string]$ProjectPath,
    [switch]$SkipSetup,
    [switch]$SkipInit
)

$ErrorActionPreference = "Stop"

# Se ProjectPath n√£o foi especificado, detectar automaticamente
if (!$ProjectPath) {
    # Assumir que estamos em minikube/scripts/windows/, subir 3 n√≠veis para raiz
    $ProjectPath = Split-Path (Split-Path (Split-Path $PSScriptRoot -Parent) -Parent) -Parent
}

function Write-Status {
    param([string]$Message, [string]$Color = "Cyan")
    Write-Host "üîß $Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Test-ProjectStructure {
    param([string]$Path)
    
    $requiredPaths = @(
        "minikube",
        "minikube\scripts",
        "minikube\scripts\windows",
        "temp"
    )
    
    foreach ($requiredPath in $requiredPaths) {
        $fullPath = Join-Path $Path $requiredPath
        if (!(Test-Path $fullPath)) {
            return $false
        }
    }
    return $true
}

function Run-Setup {
    if ($SkipSetup) {
        Write-Warning "Pulando instala√ß√£o de depend√™ncias"
        return
    }
    
    $setupScript = Join-Path $ProjectPath "temp\Setup-Fresh-Machine.ps1"
    
    if (!(Test-Path $setupScript)) {
        Write-Error "Script de setup n√£o encontrado: $setupScript"
        throw "Setup script missing"
    }
    
    Write-Status "Executando instala√ß√£o de depend√™ncias..."
    
    # Verificar se j√° est√° executando como admin
    $identity = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($identity)
    $isAdmin = $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    
    if ($isAdmin) {
        # J√° √© admin, executar diretamente
        & $setupScript -RunInitialization
    } else {
        # Elevar privil√©gios e executar
        Write-Status "Elevando privil√©gios para instala√ß√£o..."
        $arguments = "-NoProfile -ExecutionPolicy Bypass -File `"$setupScript`" -RunInitialization"
        Start-Process PowerShell -ArgumentList $arguments -Verb RunAs -Wait
    }
    
    Write-Success "Setup de depend√™ncias conclu√≠do"
}

function Run-Initialization {
    if ($SkipInit) {
        Write-Warning "Pulando inicializa√ß√£o do ambiente"
        return
    }
    
    # Tentar carregar sistema de paths din√¢micos
    $getProjectRootScript = Join-Path $ProjectPath "minikube\scripts\windows\Get-ProjectRoot.ps1"
    
    if (Test-Path $getProjectRootScript) {
        Write-Status "Carregando sistema de paths din√¢micos..."
        . $getProjectRootScript
        $projectPaths = Get-ProjectPaths
        
        $initScript = $projectPaths.Scripts.Init
    } else {
        # Fallback para path fixo
        $initScript = Join-Path $ProjectPath "minikube\scripts\windows\init\init-minikube-fixed.ps1"
    }
    
    if (!(Test-Path $initScript)) {
        Write-Error "Script de inicializa√ß√£o n√£o encontrado: $initScript"
        return
    }
    
    Write-Status "Executando inicializa√ß√£o do ambiente..."
    
    try {
        & $initScript -InstallKeda
        Write-Success "Ambiente inicializado com sucesso!"
    } catch {
        Write-Error "Erro na inicializa√ß√£o: $($_.Exception.Message)"
        throw
    }
}

function Show-FinalInstructions {
    Write-Host "`nüéâ Bootstrap conclu√≠do com sucesso!" -ForegroundColor Green
    Write-Host "==========================================" -ForegroundColor Green
    
    Write-Host "`nüìä Comandos √∫teis:" -ForegroundColor Cyan
    Write-Host "Dashboard:  .\minikube\scripts\windows\monitoring\open-dashboard.ps1" -ForegroundColor Yellow
    Write-Host "Status:     .\minikube\scripts\windows\maintenance\quick-status.ps1" -ForegroundColor Yellow
    Write-Host "Teste:      .\minikube\windows-test-structure.ps1" -ForegroundColor Yellow
    
    Write-Host "`nüåê Acessos:" -ForegroundColor Cyan
    Write-Host "RabbitMQ:   http://localhost:15672 (guest/guest)" -ForegroundColor Yellow
    Write-Host "MongoDB:    mongodb://admin:admin@localhost:27017/admin" -ForegroundColor Yellow
    Write-Host "Dashboard:  http://localhost:53954" -ForegroundColor Yellow
    
    Write-Host "`n‚úÖ Ambiente DevOps pronto para uso!" -ForegroundColor Green
}

# ================== EXECU√á√ÉO PRINCIPAL ==================

try {
    Write-Host "`nüöÄ Bootstrap DevOps - Configura√ß√£o Offline" -ForegroundColor Magenta
    Write-Host "=========================================" -ForegroundColor Magenta
    
    # Se ProjectPath n√£o foi especificado, detectar automaticamente
    if (!$ProjectPath) {
        # Assumir que estamos em minikube/scripts/windows/, subir 3 n√≠veis para raiz
        $ProjectPath = Split-Path (Split-Path (Split-Path $PSScriptRoot -Parent) -Parent) -Parent
    }
    
    Write-Status "Verificando projeto em: $ProjectPath"
    
    if (!(Test-ProjectStructure $ProjectPath)) {
        Write-Error "Estrutura de projeto n√£o encontrada em: $ProjectPath"
        Write-Error "Certifique-se de que o projeto DevOps foi transferido corretamente"
        exit 1
    }
    
    Write-Success "Estrutura de projeto validada"
    
    # Navegar para pasta do projeto
    Set-Location $ProjectPath
    Write-Status "Pasta atual: $(Get-Location)"
    
    # Executar setup se necess√°rio
    if (!$SkipSetup) {
        Run-Setup
    }
    
    # Executar inicializa√ß√£o se necess√°rio
    if (!$SkipInit) {
        Run-Initialization
    }
    
    # Mostrar instru√ß√µes finais
    Show-FinalInstructions
    
} catch {
    Write-Error "Erro durante o bootstrap: $($_.Exception.Message)"
    Write-Host "`nüìã Verifique:" -ForegroundColor Yellow
    Write-Host "1. Projeto foi transferido corretamente" -ForegroundColor Yellow
    Write-Host "2. Executando da pasta correta" -ForegroundColor Yellow
    Write-Host "3. Conex√£o com internet para downloads" -ForegroundColor Yellow
    exit 1
}